"""Read, process, and produce cell type annotations from scRNA-seq data"""


```{python}
import scanpy as sc
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import os

adata = sc.read_10x_mtx("/home/sama/CITE-seq_scRNA-seq_data", prefix="GSM5008737_RNA_3P-")

# Make variable names unique
adata.var_names_make_unique()

print(adata)

print(adata.obs)
print(adata.var)
print(adata.X)
```

```{python}
# Calculate mean expression for each gene to find highest expressed genes
mean_expr = adata.X.mean(axis=0).A1  # Convert to 1D array
top_genes_idx = np.argsort(mean_expr)[-3:]  # Indices of top 3 genes
top_genes = adata.var_names[top_genes_idx]
print(f"Top expressed genes: {top_genes}")

# Plot expression distributions of top 3 genes
fig, axes = plt.subplots(1, 3, figsize=(15, 5))

for i, gene in enumerate(top_genes):
    gene_expression = adata[:, gene].X.toarray().flatten()
    
    axes[i].hist(gene_expression, bins=50, alpha=0.7, edgecolor='black')
    axes[i].set_title(f'Expression Distribution: {gene}')
    axes[i].set_xlabel('Expression Level')
    axes[i].set_ylabel('Number of Cells')
    axes[i].grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# Calculate per-cell metrics
adata.obs['n_genes'] = (adata.X > 0).sum(axis=1)
adata.obs['total_counts'] = adata.X.sum(axis=1)

# Violin plots for genes per cell and total counts
fig, axes = plt.subplots(1, 2, figsize=(12, 5))

sc.pl.violin(adata, 'n_genes', ax=axes[0], show=False)
axes[0].set_title('Number of Genes per Cell')

sc.pl.violin(adata, 'total_counts', ax=axes[1], show=False)
axes[1].set_title('Total Counts per Cell')

plt.tight_layout()
plt.show()
```

```{python}
# Log normalize the data
sc.pp.normalize_total(adata, target_sum=1e4)
sc.pp.log1p(adata)
print("Log normalization completed")
```

```{python}
sc.pp.highly_variable_genes(adata, min_mean=0.0005, max_mean=10, min_disp=0.5, flavor="seurat_v3")
adata_high_variability = adata[:, adata.var.highly_variable]
print(adata_high_variability)
```

```{python}
# Z-score the highly variable genes data
sc.pp.scale(adata_high_variability, max_value=10)
print("Z-score normalization completed")
print(adata_high_variability)
```

```{python}
# Select three random genes
# np.random.seed(42)  # For reproducibility
random_genes = np.random.choice(adata_high_variability.var_names, size=3, replace=False)
print(f"Selected genes: {random_genes}")

# Plot expression distributions
fig, axes = plt.subplots(1, 3, figsize=(15, 5))

for i, gene in enumerate(random_genes):
    gene_expression = adata_high_variability[:, gene].X.toarray().flatten()
    
    axes[i].hist(gene_expression, bins=50, alpha=0.7, edgecolor='black')
    axes[i].set_title(f'Expression Distribution: {gene}')
    axes[i].set_xlabel('Expression Level')
    axes[i].set_ylabel('Number of Cells')
    axes[i].grid(True, alpha=0.3)

plt.tight_layout()
plt.show()
```

```{python}
# Run PCA
N_PRINCIPAL_COMPONENTS = 50
sc.tl.pca(adata_high_variability, n_comps=N_PRINCIPAL_COMPONENTS)
print(f"PCA completed with {N_PRINCIPAL_COMPONENTS} components")
```

```{python}
# Create elbow plot
variance_ratio = adata_high_variability.uns['pca']['variance_ratio']

plt.figure(figsize=(10, 6))
plt.plot(range(1, len(variance_ratio) + 1), variance_ratio, 'bo-')
plt.xlabel('Principal Component')
plt.ylabel('Variance Ratio')
plt.title('PCA Elbow Plot')
plt.grid(True, alpha=0.3)
plt.show()

print(f"First 9 PCs explain {sum(variance_ratio[:9]):.3f} of total variance")
```

```{python}
# Compute neighborhood graph
N_NEIGHBORS = 15
N_PCS = 9
sc.pp.neighbors(adata_high_variability, n_neighbors=N_NEIGHBORS, n_pcs=N_PCS)
print(f"Neighborhood graph computed using {N_NEIGHBORS} neighbors and {N_PCS} PCs")
```

```{python}
# Perform Leiden clustering
LEIDEN_RESOLUTION = 1.5
sc.tl.leiden(adata_high_variability, resolution=LEIDEN_RESOLUTION, flavor="igraph", n_iterations=2, directed=False)
print(f"Leiden clustering completed with resolution {LEIDEN_RESOLUTION}")
print(f"Number of clusters: {len(adata_high_variability.obs['leiden'].unique())}")
```

```{python}
# Compute UMAP for visualization
sc.tl.umap(adata_high_variability)
print("UMAP computation completed")
```

```{python}
# Visualize clusters in UMAP space
sc.pl.umap(adata_high_variability, color='leiden', legend_loc='on data', 
           title='Leiden Clustering', frameon=False, save='.pdf')
plt.show()
```

```{python}
# Find marker genes for each cluster
sc.tl.rank_genes_groups(adata_high_variability, 'leiden', method='wilcoxon')
sc.pl.rank_genes_groups(adata_high_variability, n_genes=20, sharey=False)
plt.show()
```

```{python}
# Dictionary of cell type markers from literature
marker_dict = {
    "B intermediate": ["MS4A1", "TNFRSF13B", "IGHM", "IGHD", "AIM2", "CD79A", "LINC01857", "RALGPS2", "BANK1", "CD79B"],
    "B memory": ["MS4A1", "COCH", "AIM2", "BANK1", "SSPN", "CD79A", "TEX9", "RALGPS2", "TNFRSF13C", "LINC01781"],
    "B naive": ["IGHM", "IGHD", "CD79A", "IL4R", "MS4A1", "CXCR4", "BTG1", "TCL1A", "CD79B", "YBX3"],
    "Plasmablast": ["IGHA2", "MZB1", "TNFRSF17", "DERL3", "TXNDC5", "TNFRSF13B", "POU2AF1", "CPNE5", "HRASLS2", "NT5DC2"],
    "CD4 CTL": ["GZMH", "CD4", "FGFBP2", "ITGB1", "GZMA", "CST7", "GNLY", "B2M", "IL32", "NKG7"],
    "CD4 Naive": ["TCF7", "CD4", "CCR7", "IL7R", "FHIT", "LEF1", "MAL", "NOSIP", "LDHB", "PIK3IP1"],
    "CD4 Proliferating": ["MKI67", "TOP2A", "PCLAF", "CENPF", "TYMS", "NUSAP1", "ASPM", "PTTG1", "TPX2", "RRM2"],
    "CD4 TCM": ["IL7R", "TMSB10", "CD4", "ITGB1", "LTB", "TRAC", "AQP3", "LDHB", "IL32", "MAL"],
    "CD4 TEM": ["IL7R", "CCL5", "FYB1", "GZMK", "IL32", "GZMA", "KLRB1", "TRAC", "LTB", "AQP3"],
    "Treg": ["RTKN2", "FOXP3", "AC133644.2", "CD4", "IL2RA", "TIGIT", "CTLA4", "FCRL3", "LAIR2", "IKZF2"],
    "CD8 Naive": ["CD8B", "S100B", "CCR7", "RGS10", "NOSIP", "LINC02446", "LEF1", "CRTAM", "CD8A", "OXNAD1"],
    "CD8 Proliferating": ["MKI67", "CD8B", "TYMS", "TRAC", "PCLAF", "CD3D", "CLSPN", "CD3G", "TK1", "RRM2"],
    "CD8 TCM": ["CD8B", "ANXA1", "CD8A", "KRT1", "LINC02446", "YBX3", "IL7R", "TRAC", "NELL2", "LDHB"],
    "CD8 TEM": ["CCL5", "GZMH", "CD8A", "TRAC", "KLRD1", "NKG7", "GZMK", "CST7", "CD8B", "TRGC2"],
    "ASDC": ["PPP1R14A", "LILRA4", "AXL", "IL3RA", "SCT", "SCN9A", "LGMN", "DNASE1L3", "CLEC4C", "GAS6"],
    "cDC1": ["CLEC9A", "DNASE1L3", "C1orf54", "IDO1", "CLNK", "CADM1", "FLT3", "ENPP1", "XCR1", "NDRG2"],
    "cDC2": ["FCER1A", "HLA-DQA1", "CLEC10A", "CD1C", "ENHO", "PLD4", "GSN", "SLC38A1", "NDRG2", "AFF3"],
    "pDC": ["ITM2C", "PLD4", "SERPINF1", "LILRA4", "IL3RA", "TPM2", "MZB1", "SPIB", "IRF4", "SMPD3"],
    "CD14 Mono": ["S100A9", "CTSS", "S100A8", "LYZ", "VCAN", "S100A12", "IL1B", "CD14", "G0S2", "FCN1"],
    "CD16 Mono": ["CDKN1C", "FCGR3A", "PTPRC", "LST1", "IER5", "MS4A7", "RHOC", "IFITM3", "AIF1", "HES4"],
    "NK": ["GNLY", "TYROBP", "NKG7", "FCER1G", "GZMB", "TRDC", "PRF1", "FGFBP2", "SPON2", "KLRF1"],
    "NK Proliferating": ["MKI67", "KLRF1", "TYMS", "TRDC", "TOP2A", "FCER1G", "PCLAF", "CD247", "CLSPN", "ASPM"],
    "NK_CD56bright": ["XCL2", "FCER1G", "SPINK2", "TRDC", "KLRC1", "XCL1", "SPTSSB", "PPP1R9A", "NCAM1", "TNFRSF11A"],
    "Eryth": ["HBD", "HBM", "AHSP", "ALAS2", "CA1", "SLC4A1", "IFIT1B", "TRIM58", "SELENBP1", "TMCC2"],
    "HSPC": ["SPINK2", "PRSS57", "CYTL1", "EGFL7", "GATA2", "CD34", "SMIM24", "AVP", "MYB", "LAPTM4B"],
    "ILC": ["KIT", "TRDC", "TTLL10", "LINC01229", "SOX4", "KLRB1", "TNFRSF18", "TNFRSF4", "IL1R1", "HPGDS"],
    "Platelet": ["PPBP", "PF4", "NRGN", "GNG11", "CAVIN2", "TUBB1", "CLU", "HIST1H2AC", "RGS18", "GP9"],
    "dnT": ["PTPN3", "MIR4422HG", "NUCB2", "CAV1", "DTHD1", "GZMA", "MYB", "FXYD2", "GZMK", "AC004585.1"],
    "gdT": ["TRDC", "TRGC1", "TRGC2", "KLRC1", "NKG7", "TRDV2", "CD7", "TRGV9", "KLRD1", "KLRG1"],
    "MAIT": ["KLRB1", "NKG7", "GZMK", "IL7R", "SLC4A10", "GZMA", "CXCR6", "PRSS35", "RBM24", "NCR3"]
}

# Create a dictionary mapping cell types to their expanded labels
cell_type_labels = {
    "B intermediate": "Intermediate B cell",
    "B memory": "Memory B cell",
    "B naive": "Naive B cell",
    "Plasmablast": "Plasmablast",
    "CD4 CTL": "CD4+ Cytotoxic T",
    "CD4 Naive": "CD4+ Naive T",
    "CD4 Proliferating": "CD4+ Proliferating T",
    "CD4 TCM": "CD4+ Central Memory T",
    "CD4 TEM": "CD4+ Effector Memory T",
    "Treg": "Regulatory T",
    "CD8 Naive": "CD8+ Naive T",
    "CD8 Proliferating": "CD8+ Proliferating T",
    "CD8 TCM": "CD8+ Central Memory T",
    "CD8 TEM": "CD8+ Effector Memory T",
    "ASDC": "AXL+ Dendritic Cell",
    "cDC1": "Conventional Dendritic Cell 1",
    "cDC2": "Conventional Dendritic Cell 2",
    "pDC": "Plasmacytoid Dendritic Cell",
    "CD14 Mono": "CD14+ Monocyte",
    "CD16 Mono": "CD16+ Monocyte",
    "NK": "CD56-dim Natural Killer",
    "NK Proliferating": "Proliferating Natural Killer",
    "NK_CD56bright": "CD56-bright Natural Killer",
    "Eryth": "Erythroid cell",
    "HSPC": "Hematopoietic stem and progenitor cell",
    "ILC": "Innate Lymphoid Cell",
    "Platelet": "Platelet",
    "dnT": "Double-negative T",
    "gdT": "gamma-delta T",
    "MAIT": "Mucosal associated invariant T"
}

print(f"Created marker dictionary with {len(marker_dict)} cell types")
```

```{python}
cellDF = sc.tl.marker_gene_overlap(adata_high_variability, marker_dict)
with pd.option_context('display.max_rows', None,
                       'display.max_columns', None,
                       'display.precision', 3,
                       ):
    print(cellDF)


```

```{python}
# Export processed data for SCSA annotation
OUTPUT_DIR = "/home/sama/bi-cytok-2/bicytok/processed_data"
os.makedirs(OUTPUT_DIR, exist_ok=True)

# Save the processed AnnData object
adata_high_variability.write(f"{OUTPUT_DIR}/processed_adata.h5ad")

# Export for SCSA format (10X format)
sc.io.write(f"{OUTPUT_DIR}/scsa_matrix.mtx", adata_high_variability.X.T)

# Save features (genes)
features_df = pd.DataFrame({
    'gene_id': adata_high_variability.var_names,
    'gene_name': adata_high_variability.var_names,
    'feature_type': 'Gene Expression'
})
features_df.to_csv(f"{OUTPUT_DIR}/scsa_features.tsv", sep='\t', index=False, header=False)

# Save barcodes (cell IDs)  
barcodes_df = pd.DataFrame(adata_high_variability.obs_names)
barcodes_df.to_csv(f"{OUTPUT_DIR}/scsa_barcodes.tsv", sep='\t', index=False, header=False)

print(f"Processed data exported to {OUTPUT_DIR}")
print(f"Matrix shape: {adata_high_variability.X.shape}")
```

