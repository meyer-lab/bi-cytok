---
title: "Binding model scaling factor analysis"
---

# Summary
Generates a comprehensive analysis of how scaling factors applied to raw receptor counts affect multiple aspects of receptor selectivity optimization. Produces a 6-panel figure showing the relationship between conversion factors and various binding model parameters including receptor binding, selectivity, optimal affinities, and Kx_star values.

# Imports
- CITE-seq surface marker expression data (`importCITE`)
- Selectivity optimization functions (`optimize_affs`, `get_cell_bindings`)

# Parameters
- `targ_cell`: String identifier for target cell type whose selectivity will be maximized
- `sample_size`: Integer number of cells to sample from CITE-seq dataframe
- `cell_categorization`: String column name for cell type classification in CITE-seq data
- `dose`: Float concentration of ligand complex in binding model
- `signal_receptor`: String name of receptor used for signal delivery in binding model
- `receptors_of_interest`: List of tuples containing (receptor_name, valency) pairs for analysis
- `affinity_bounds`: Tuple of optimization bounds for receptor affinities
- `kx_star_bounds`: Tuple of optimization bounds for Kx_star parameter
- `num_conv_factors`: Integer number of conversion factors to test (logspace from 0.1 to 1e8)

# Outputs
- **6-Panel Figure**: Comprehensive analysis showing:
  1. Target receptor binding vs conversion factor (on-target vs off-target)
  2. Signal receptor binding vs conversion factor (on-target vs off-target)
  3. Optimal selectivity vs conversion factor
  4. Optimal target receptor affinity vs conversion factor
  5. Optimal signal receptor affinity vs conversion factor
  6. Optimal Kx_star vs conversion factor
- Black dashed vertical line at conversion factor = 1 (no scaling reference)

```{python}
%config InlineBackend.figure_formats = ['svg']

import numpy as np
import pandas as pd
import seaborn as sns
import time
import matplotlib.pyplot as plt

from bicytok.imports import importCITE, sample_receptor_abundances
from bicytok.selectivity_funcs import get_cell_bindings, optimize_affs

# Parameters
targ_cell = "Treg"
sample_size = 1000
cell_categorization = "CellType2"
dose = 1e-10
signal_receptor = "CD122"
receptors_of_interest = [("CD25", 2), ("CD4-1", 2)]
affinity_bounds = (6, 12)
kx_star_bounds = (2.24e-15, 2.24e-3)
num_conv_factors = 10
conversion_factors = np.logspace(-1, 8, num=num_conv_factors)

CITE_DF = importCITE()

epitopes_all = [
    col
    for col in CITE_DF.columns
    if col not in ["CellType1", "CellType2", "CellType3"]
]
epitopes_df = CITE_DF[epitopes_all + [cell_categorization]]
epitopes_df = epitopes_df.rename(columns={cell_categorization: "Cell Type"})

sample_df = sample_receptor_abundances(
    CITE_DF=epitopes_df,
    numCells=sample_size,
    targCellType=targ_cell,
)

filter_df = pd.DataFrame(
    {
        signal_receptor: sample_df[signal_receptor],
        "Cell Type": sample_df["Cell Type"],
    }
)
for receptor_valency in receptors_of_interest:
    receptor = receptor_valency[0]
    filter_df[receptor] = sample_df[receptor]

on_target_mask = (filter_df["Cell Type"] == targ_cell).to_numpy()
off_target_mask = ~on_target_mask

# Structured data storage
results = {
    "targ_bound_sig_r": [],
    "off_targ_bound_sig_r": [],
    "targ_bound_tar_r": [],
    "off_targ_bound_tar_r": [],
    "selectivities": [],
    "target_affinities": [],
    "signal_affinities": [],
    "optimal_kx_stars": [],
}

for receptor_valency in receptors_of_interest:
    # Initialize per-receptor results
    per_rec_results = {key: [] for key in results}

    receptor = receptor_valency[0]
    model_valencies = np.array([[(receptor_valency[1]), (receptor_valency[1])]])

    for conv_fact in conversion_factors:
        time_start = time.time()

        test_df = filter_df.copy()
        test_df[receptor] = test_df[receptor] * conv_fact
        rec_mat = test_df[[signal_receptor, receptor]].to_numpy()

        opt_selec, opt_affs, opt_kx_star = optimize_affs(
            targRecs=rec_mat[on_target_mask],
            offTargRecs=rec_mat[off_target_mask],
            dose=dose,
            valencies=model_valencies,
            affinity_bounds=affinity_bounds,
            Kx_star_bounds=kx_star_bounds,
        )

        per_rec_results["selectivities"].append(1 / opt_selec)
        per_rec_results["signal_affinities"].append(opt_affs[0])
        per_rec_results["target_affinities"].append(opt_affs[1])
        per_rec_results["optimal_kx_stars"].append(opt_kx_star)

        r_bound = get_cell_bindings(
            recCounts=rec_mat,
            monomerAffs=opt_affs,
            dose=dose,
            valencies=model_valencies,
            Kx_star=opt_kx_star,
        )

        targ_bound = r_bound[on_target_mask]
        off_targ_bound = r_bound[off_target_mask]

        targ_bound = np.sum(targ_bound, axis=0) / targ_bound.shape[0]
        off_targ_bound = np.sum(off_targ_bound, axis=0) / off_targ_bound.shape[0]

        per_rec_results["targ_bound_sig_r"].append(targ_bound[0])
        per_rec_results["off_targ_bound_sig_r"].append(off_targ_bound[0])
        per_rec_results["targ_bound_tar_r"].append(targ_bound[1])
        per_rec_results["off_targ_bound_tar_r"].append(off_targ_bound[1])

        time_stop = time.time()
        print(
            f"Receptor: {receptor}, Conversion Factor: {conv_fact:.2e}, Time: {time_stop - time_start:.2f}s"
        )

    # Store results for this receptor
    for key in results:
        results[key].append(per_rec_results[key])
```

```{python}
#| fig-cap: "Binding model scaling factor analysis showing receptor binding, selectivity, and optimization parameters"

fig, axes = plt.subplots(2, 3, figsize=(18, 10))
ax = axes.flatten()

palette = sns.color_palette("colorblind", n_colors=len(receptors_of_interest))

# Define plot configurations
plot_configs = [
    {
        "data_key": "targ_bound_tar_r",
        "off_data_key": "off_targ_bound_tar_r",
        "ylabel": "Average Bound Target Receptors",
        "title": "Target Receptor Binding vs Conversion Factor",
    },
    {
        "data_key": "targ_bound_sig_r",
        "off_data_key": "off_targ_bound_sig_r",
        "ylabel": "Average Bound Signal Receptors",
        "title": f"Signal Receptor ({signal_receptor}) Binding vs Scaling Factor",
    },
    {
        "data_key": "selectivities",
        "ylabel": "Optimal Selectivity",
        "title": "Selectivity vs Conversion Factor",
    },
    {
        "data_key": "target_affinities",
        "ylabel": "Optimal Affinity (log10 Ka)",
        "title": "Target Receptor Optimal Affinity vs Conversion Factor",
    },
    {
        "data_key": "signal_affinities",
        "ylabel": "Optimal Affinity (log10 Ka)",
        "title": f"Signal Receptor ({signal_receptor}) Affinity vs Scaling Factor",
    },
    {
        "data_key": "optimal_kx_stars",
        "ylabel": "Optimal Kx_star",
        "title": "Optimal Kx_star vs Conversion Factor",
    },
]

for plot_idx, config in enumerate(plot_configs):
    for i, receptor_valency in enumerate(receptors_of_interest):
        receptor = receptor_valency[0]
        valency = receptor_valency[1]
        # Plot main data
        ax[plot_idx].plot(
            conversion_factors,
            results[config["data_key"]][i],
            marker="o",
            ls="-",
            label=f"{targ_cell}: {receptor} (Valency: {valency*2})"
            if "off_data_key" in config
            else f"{receptor} (Valency: {valency*2})",
            color=palette[i],
        )

        # Plot off-target data if applicable
        if "off_data_key" in config:
            ax[plot_idx].plot(
                conversion_factors,
                results[config["off_data_key"]][i],
                marker="x",
                ls="--",
                label=f"Non-{targ_cell}: {receptor}",
                color=palette[i],
            )

    # Configure axes
    ax[plot_idx].axvline(x=10**0, linestyle="--", color="black", alpha=0.5)
    ax[plot_idx].set_xscale("log")
    if plot_idx in [0, 1, 2, 5]:  # Log scale for specific plots
        ax[plot_idx].set_yscale("log")
    ax[plot_idx].set_xlabel("Conversion Factor")
    ax[plot_idx].set_ylabel(config["ylabel"])
    ax[plot_idx].set_title(config["title"])

    # Add legend for specific plots
    if plot_idx in [1, 2, 3, 4, 5]:
        legend_title = (
            "Cell Type: Target Receptor"
            if "off_data_key" in config
            else "Target Receptor"
        )
        ax[plot_idx].legend(title=legend_title)

plt.tight_layout()
plt.show()
```

## Parameter Summary
```{python}
#| output: asis

text = f"""
Analyzed the effects of scaling factors on binding model parameters for **{targ_cell}** cell selectivity optimization. The analysis tested **{num_conv_factors}** conversion factors ranging from 0.1 to 1e8 on **{sample_size}** cells sampled from the CITE-seq dataset.
\n\n
The signal receptor used was **{signal_receptor}** at a dose of **{dose}**. Target receptors analyzed were **{', '.join([r[0] for r in receptors_of_interest])}** with respective valencies of **{', '.join([str(r[1]*2) for r in receptors_of_interest])}**. Affinity optimization bounds were set to **{affinity_bounds}** and Kx_star bounds to **{kx_star_bounds}**.
"""

print(text)
```
