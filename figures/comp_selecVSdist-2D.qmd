---
title: "Relationship between 1D distance metrics and 2D selectivity"
---

# Summary
Generates scatter plots examining the correlation between 1D distance metrics (KL Divergence and EMD) and 2D selectivity optimization results for individual receptors. Evaluates whether single-receptor expression differences predict bivalent and tetravalent complex selectivity performance across different valency configurations.

# Imports
- CITE-seq surface marker expression data (`importCITE`)
- 1D distance metric calculation functions (`KL_EMD_1D`)
- Selectivity optimization functions (`optimize_affs`)

# Parameters
- `signal_receptor`: String name of receptor used for signal delivery in binding model
- `sample_size`: Integer number of cells sampled from CITE-seq data for analysis
- `targ_cell`: String identifier for target cell type in selectivity optimization
- `test_valencies`: List of integers specifying ligand valencies to test
- `dose`: Float concentration of ligand complex in binding model
- `cell_categorization`: String column name for cell type classification in CITE-seq data

# Outputs
- **Scatter Plot 1**: 1D KL Divergence vs 2D selectivity showing:
  - KL Divergence values on x-axis
  - Selectivity values (1/optimization_result) on y-axis
  - Points colored by receptor name and styled by valency configuration
  - Top 10 receptors by KL Divergence highlighted with full opacity and labeled in legend
  - All other receptors shown with reduced opacity
- **Scatter Plot 2**: 1D EMD vs 2D selectivity with identical formatting for top 10 EMD receptors

```{python}
%config InlineBackend.figure_formats = ['svg']

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from bicytok.distance_metric_funcs import KL_EMD_1D
from bicytok.imports import filter_receptor_abundances, importCITE, sample_receptor_abundances
from bicytok.selectivity_funcs import optimize_affs

import time

import os
os.environ['CUDA_VISIBLE_DEVICES'] = '0'

signal_receptor = "CD122"
sample_size = 1000
targ_cell = "Treg"
test_valencies = [(1), (2)]
dose = 1e-10
cell_categorization = "CellType2"

CITE_DF = importCITE()
assert targ_cell in CITE_DF[cell_categorization].unique()

epitopes = [
    col
    for col in CITE_DF.columns
    if col not in ["Cell", "CellType1", "CellType2", "CellType3"]
]
epitopes_df = CITE_DF[epitopes + [cell_categorization]]
epitopes_df = epitopes_df.rename(columns={cell_categorization: "Cell Type"})
sample_df = sample_receptor_abundances(
    CITE_DF=epitopes_df,
    numCells=min(sample_size, epitopes_df.shape[0]),
    targCellType=targ_cell,
)
filtered_sample_df = filter_receptor_abundances(sample_df, targ_cell)
epitopes = filtered_sample_df.columns[:-1]

on_target_mask = (filtered_sample_df["Cell Type"] == targ_cell).to_numpy()
off_target_mask = ~on_target_mask

df_targ_cell = filtered_sample_df.loc[on_target_mask]
df_off_targ_cell = filtered_sample_df.loc[off_target_mask]

selectivity_vals = []
KL_div_vals = []
EMD_vals = []
for receptor in epitopes:
    rec_abundances = filtered_sample_df[receptor].to_numpy().reshape(-1, 1)

    KL_div_mat, EMD_mat = KL_EMD_1D(rec_abundances, on_target_mask, off_target_mask)
    KL_div = KL_div_mat[0]
    EMD = EMD_mat[0]
    KL_div_vals.append(KL_div)
    EMD_vals.append(EMD)

    for valency in test_valencies:
        time_start = time.time()

        if np.isnan(KL_div) or np.isnan(EMD):
            selectivity_vals.append(np.nan)
            continue

        model_valencies = np.array([[valency, valency]])
        targ_recs = df_targ_cell[[signal_receptor] + [receptor]].to_numpy()
        off_targ_recs = df_off_targ_cell[[signal_receptor] + [receptor]].to_numpy()
        opt_selec, _, _ = optimize_affs(
            targRecs=targ_recs,
            offTargRecs=off_targ_recs,
            dose=dose,
            valencies=model_valencies,
            
        )
        selectivity_vals.append(1 / opt_selec)

        time_end = time.time()
        print(f"Processing time for {receptor} (Valency {valency}): {time_end - time_start} seconds")

valency_map = {1: "Valency 2", 2: "Valency 4"}
valency_labels = [valency_map[v] for _ in epitopes for v in test_valencies]
metrics_df = pd.DataFrame(
    {
        "Receptor Pair": [
            str(receptor) for receptor in epitopes for _ in test_valencies
        ],
        "Valency": valency_labels,
        "KL Divergence": np.repeat(KL_div_vals, len(test_valencies)),
        "EMD": np.repeat(EMD_vals, len(test_valencies)),
        "Selectivity": selectivity_vals,
    }
)

unique_receptors_df = pd.DataFrame(
    {
        "Receptor Pair": [str(receptor) for receptor in epitopes],
        "KL Divergence": [KL_div_val for KL_div_val in KL_div_vals],
        "EMD": [EMD_val for EMD_val in EMD_vals],
    }
)
unique_receptors_df = unique_receptors_df.fillna(0)
```


```{python}
# Get top 7 receptors for each metric (each receptor counted once)
top_kl_indices = unique_receptors_df["KL Divergence"].nlargest(7).index.tolist()
top_kl_receptors = unique_receptors_df.iloc[top_kl_indices][
    "Receptor Pair"
].tolist()

top_emd_indices = unique_receptors_df["EMD"].nlargest(7).index.tolist()
top_emd_receptors = unique_receptors_df.iloc[top_emd_indices][
    "Receptor Pair"
].tolist()

# Get top 7 selectivity receptors (taking best selectivity per receptor across valencies)
selectivity_per_receptor = metrics_df.dropna(subset=["Selectivity"]).groupby("Receptor Pair")["Selectivity"].max().reset_index()
top_selectivity_data = selectivity_per_receptor.nlargest(7, "Selectivity")
top_selectivity_receptors = top_selectivity_data["Receptor Pair"].tolist()

# Create categories for KL plot
kl_both = set(top_kl_receptors).intersection(set(top_selectivity_receptors))
kl_only = set(top_kl_receptors) - set(top_selectivity_receptors)
selectivity_only_kl = set(top_selectivity_receptors) - set(top_kl_receptors)

# Create categories for EMD plot
emd_both = set(top_emd_receptors).intersection(set(top_selectivity_receptors))
emd_only = set(top_emd_receptors) - set(top_selectivity_receptors)
selectivity_only_emd = set(top_selectivity_receptors) - set(top_emd_receptors)

# Filter dataframes for KL plot categories
metrics_df_kl_both = metrics_df[metrics_df["Receptor Pair"].isin(kl_both)]
metrics_df_kl_only = metrics_df[metrics_df["Receptor Pair"].isin(kl_only)]
metrics_df_selectivity_only_kl = metrics_df[metrics_df["Receptor Pair"].isin(selectivity_only_kl)]

# Filter dataframes for EMD plot categories
metrics_df_emd_both = metrics_df[metrics_df["Receptor Pair"].isin(emd_both)]
metrics_df_emd_only = metrics_df[metrics_df["Receptor Pair"].isin(emd_only)]
metrics_df_selectivity_only_emd = metrics_df[metrics_df["Receptor Pair"].isin(selectivity_only_emd)]
```

```{python}
#| fig-cap: "KL Divergence vs Selectivity with categorized top 5 receptors"

fig, ax = plt.subplots(figsize=(10, 8))

# Plot all receptors in gray
# Plot all receptors in gray with specific markers by valency
for valency in metrics_df["Valency"].unique():
    subset = metrics_df[metrics_df["Valency"] == valency]
    marker = 'o' if valency == "Valency 2" else 'X'
    ax.scatter(
        subset["KL Divergence"],
        subset["Selectivity"],
        marker=marker,
        s=200,
        color='gray',
        alpha=0.5
    )

# Plot receptors identified by both KL and selectivity (blue)
if len(metrics_df_kl_both) > 0:
    for valency in metrics_df_kl_both["Valency"].unique():
        subset = metrics_df_kl_both[metrics_df_kl_both["Valency"] == valency]
        marker = 'o' if valency == "Valency 2" else 'X'
        ax.scatter(
            subset["KL Divergence"],
            subset["Selectivity"],
            color="#2774AE",
            s=200,
            alpha=0.9,
            marker=marker,
            label="Both KL & Selectivity" if valency == metrics_df_kl_both["Valency"].unique()[0] else ""
        )

# Plot receptors identified only by KL (red)
if len(metrics_df_kl_only) > 0:
    for valency in metrics_df_kl_only["Valency"].unique():
        subset = metrics_df_kl_only[metrics_df_kl_only["Valency"] == valency]
        marker = 'o' if valency == "Valency 2" else 'X'
        ax.scatter(
            subset["KL Divergence"],
            subset["Selectivity"],
            color="#CF4D6F",
            s=200,
            alpha=0.9,
            marker=marker,
            label="KL Only" if valency == metrics_df_kl_only["Valency"].unique()[0] else ""
        )

# Plot receptors identified only by selectivity (yellow)
if len(metrics_df_selectivity_only_kl) > 0:
    for valency in metrics_df_selectivity_only_kl["Valency"].unique():
        subset = metrics_df_selectivity_only_kl[metrics_df_selectivity_only_kl["Valency"] == valency]
        marker = 'o' if valency == "Valency 2" else 'X'
        ax.scatter(
            subset["KL Divergence"],
            subset["Selectivity"],
            color="#FFB81C",
            s=200,
            alpha=0.9,
            marker=marker,
            label="Selectivity Only" if valency == metrics_df_selectivity_only_kl["Valency"].unique()[0] else ""
        )

ax.grid(True, linestyle='--', alpha=0.7)
ax.set_xlabel("KL Divergence", fontsize=30)
ax.set_ylabel("Binding Model Selectivity", fontsize=30)
ax.tick_params(axis='x', labelsize=25)
ax.tick_params(axis='y', labelsize=25)
ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=5)
plt.tight_layout()
plt.show()
```

```{python}
#| fig-cap: "EMD vs Selectivity with categorized top 5 receptors"

fig, ax = plt.subplots(figsize=(10, 8))

# Plot all receptors in gray
for valency in metrics_df["Valency"].unique():
    subset = metrics_df[metrics_df["Valency"] == valency]
    marker = 'o' if valency == "Valency 2" else 'X'
    ax.scatter(
        subset["EMD"],
        subset["Selectivity"],
        marker=marker,
        s=200,
        color='gray',
        alpha=0.5
    )

# Plot receptors identified by both EMD and selectivity (blue)
if len(metrics_df_emd_both) > 0:
    for valency in metrics_df_emd_both["Valency"].unique():
        subset = metrics_df_emd_both[metrics_df_emd_both["Valency"] == valency]
        marker = 'o' if valency == "Valency 2" else 'X'
        ax.scatter(
            subset["EMD"],
            subset["Selectivity"],
            color="#2774AE",
            s=200,
            alpha=0.9,
            marker=marker,
            label="Both EMD & Selectivity" if valency == metrics_df_emd_both["Valency"].unique()[0] else ""
        )

# Plot receptors identified only by EMD (red)
if len(metrics_df_emd_only) > 0:
    for valency in metrics_df_emd_only["Valency"].unique():
        subset = metrics_df_emd_only[metrics_df_emd_only["Valency"] == valency]
        marker = 'o' if valency == "Valency 2" else 'X'
        ax.scatter(
            subset["EMD"],
            subset["Selectivity"],
            color="#CF4D6F",
            s=200,
            alpha=0.9,
            marker=marker,
            label="EMD Only" if valency == metrics_df_emd_only["Valency"].unique()[0] else ""
        )

# Plot receptors identified only by selectivity (yellow)
if len(metrics_df_selectivity_only_emd) > 0:
    for valency in metrics_df_selectivity_only_emd["Valency"].unique():
        subset = metrics_df_selectivity_only_emd[metrics_df_selectivity_only_emd["Valency"] == valency]
        marker = 'o' if valency == "Valency 2" else 'X'
        ax.scatter(
            subset["EMD"],
            subset["Selectivity"],
            color="#FFB81C",
            s=200,
            alpha=0.9,
            marker=marker,
            label="Selectivity Only" if valency == metrics_df_selectivity_only_emd["Valency"].unique()[0] else ""
        )

ax.grid(True, linestyle='--', alpha=0.7)
ax.set_xlabel("EMD", fontsize=30)
ax.set_ylabel("Binding Model Selectivity", fontsize=30)
ax.tick_params(axis='x', labelsize=25)
ax.tick_params(axis='y', labelsize=25)
ax.set_title("EMD vs Selectivity (Top 5 Receptors by Category)", fontsize=30)
ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=4)
plt.tight_layout()
plt.show()
```



## Parameter Summary
```{python}
#| output: asis

text = f"""
Visualized the relationship between 1D distance metrics (KL Divergence and EMD) and 2D selectivity. Target cells were **{targ_cell}**s, compared against all other cell types. The analysis was performed on **{sample_size}** cells sampled from the CITE-seq dataset.
\n\n
For selectivity optimization, the signal receptor was **{signal_receptor}**, with bivalent and tetravalent complexes at a dose of **{dose}**. The epitopes analyzed were **{', '.join(epitopes)}**, which served as the target receptors for selectivity optimization and as the single receptor distributions for 1D EMD and KL div. calculations.
"""

print(text)
```
